solver

input:
monster pool (for now: ordered)
resource pool (black space amount, shops, altars)

output:
a possible sequence of actions found to defeat all monsters in pool (or none)
(or best possible, where best: shortest? least resources / items used?)



later: possible sequence to defeat all level 10 monsters, and any other monsters from pool in any order


algorithm:
ideas:
1) simulated annealing:
   A) start with arbitrary many health and mana potions,
   B) use direct attacks and fireballs, use potions whenever needed
   C) use endiswall when the enemy's physical attack is >= player's max health
   D) when neither attack mode is suitable, optionally try to (buy and) use an item and go to B)
   E) Try one of the following:
      - (follow a god and) request a boon, go to B)
      - follow another god and request a boon, go to B)
      - gain piety from pactmaker or by desecration, retry E)
   F) if below 50 piety: add 50 piety, go to E)
   G) give up without solution
   Once a solution is found, try to:
     - replace potion use with uncovering tiles
     - cast other spells
     - reorder steps
     - ... ?
   in order to reduce number of needed potions to acceptable value

2) genetic algorithm:
   A) generate N random sequences of events
      - if a successful sequence is found -> done
      - otherwise stop when the next attack would result in hero's death?
   B) rate sequences with heuristic, accounting for e.g.:
      - hero's level, HP, MP, XP, damage output, piety
      - debuffs, boons
      - number of monsters defeated
      - total damage done
      - XP bonuses received
      - value of items in inventory
      - resources remaining
   C) prepare next generation of N strategies:
      - keep best X strategies as they are
      - pick best approx. N/n strategies and mutate them n times each
